// Generated by purs bundle 0.14.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.State"] = $PS["Control.Monad.State"] || {};
  var exports = $PS["Control.Monad.State"];
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  exports["execState"] = execState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  exports["MonadState"] = MonadState;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];                    
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["bindStateT"] = bindStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Vec"] = $PS["Data.Vec"] || {};
  var exports = $PS["Data.Vec"];
  var zero = {
      x: 0.0,
      y: 0.0
  };
  var $$new = function (x) {
      return function (y) {
          return {
              x: x,
              y: y
          };
      };
  };
  var mult = function (c) {
      return function (v) {
          return $$new(c * v.x)(c * v.y);
      };
  };
  var getY = function (v) {
      return v.y;
  };
  var getX = function (v) {
      return v.x;
  };
  var div = function (v) {
      return function (c) {
          return $$new(v.x / c)(v.y / c);
      };
  };
  var add = function (v) {
      return function (v1) {
          return $$new(v.x + v1.x)(v.y + v1.y);
      };
  };
  exports["getX"] = getX;
  exports["getY"] = getY;
  exports["new"] = $$new;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["mult"] = mult;
  exports["div"] = div;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ball"] = $PS["Data.Ball"] || {};
  var exports = $PS["Data.Ball"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State = $PS["Control.Monad.State"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Vec = $PS["Data.Vec"];                
  var Small = (function () {
      function Small() {

      };
      Small.value = new Small();
      return Small;
  })();
  var Within = (function () {
      function Within() {

      };
      Within.value = new Within();
      return Within;
  })();
  var Large = (function () {
      function Large() {

      };
      Large.value = new Large();
      return Large;
  })();
  var toCircle = function (v) {
      return {
          x: Data_Vec.getX(v.r),
          y: Data_Vec.getY(v.r),
          radius: v.radius
      };
  };
  var setV = function (v) {
      return function (v1) {
          return {
              r: v1.r,
              v: v,
              radius: v1.radius,
              force: v1.force,
              mass: v1.mass
          };
      };
  };
  var setR = function (r) {
      return function (v) {
          return {
              r: r,
              v: v.v,
              radius: v.radius,
              force: v.force,
              mass: v.mass
          };
      };
  };
  var $$new = function (r) {
      return function (v) {
          return function (radius) {
              return function (mass) {
                  return {
                      r: r,
                      v: v,
                      radius: radius,
                      force: Data_Vec.zero,
                      mass: mass
                  };
              };
          };
      };
  };
  var initForce = function (v) {
      return {
          r: v.r,
          v: v.v,
          radius: v.radius,
          force: Data_Vec.zero,
          mass: v.mass
      };
  };
  var gravity = function (mass) {
      return Data_Vec.mult(mass)(Data_Vec["new"](0.0)(0.25));
  };
  var getV = function (v) {
      return v.v;
  };
  var getRadius = function (v) {
      return v.radius;
  };
  var getR = function (v) {
      return v.r;
  };
  var move = function (ball) {
      return setR(Data_Vec.add(getR(ball))(getV(ball)))(ball);
  };
  var getMass = function (v) {
      return v.mass;
  };
  var getIntervalPosition = function (t0) {
      return function (t1) {
          return function (t) {
              var $36 = t < t0;
              if ($36) {
                  return Small.value;
              };
              var $37 = t <= t1;
              if ($37) {
                  return Within.value;
              };
              return Large.value;
          };
      };
  };
  var getForce = function (v) {
      return v.force;
  };
  var collide = function (e) {
      return function (dimen) {
          return function (ball) {
              var v = getV(ball);
              var vx = Data_Vec.getX(v);
              var vy = Data_Vec.getY(v);
              var radius = getRadius(ball);
              var x1 = dimen.width - radius;
              var y1 = dimen.height - radius;
              var r = getR(ball);
              var x = Data_Vec.getX(r);
              var y = Data_Vec.getY(r);
              var v1 = (function () {
                  var v2 = getIntervalPosition(radius)(x1)(x);
                  if (v2 instanceof Small) {
                      return new Data_Tuple.Tuple(radius, -e * vx);
                  };
                  if (v2 instanceof Large) {
                      return new Data_Tuple.Tuple(x1, -e * vx);
                  };
                  if (v2 instanceof Within) {
                      return new Data_Tuple.Tuple(x, vx);
                  };
                  throw new Error("Failed pattern match at Data.Ball (line 188, column 7 - line 196, column 21): " + [ v2.constructor.name ]);
              })();
              var v2 = (function () {
                  var v3 = getIntervalPosition(radius)(y1)(y);
                  if (v3 instanceof Small) {
                      return new Data_Tuple.Tuple(radius, -e * vy);
                  };
                  if (v3 instanceof Large) {
                      return new Data_Tuple.Tuple(y1, -e * vy);
                  };
                  if (v3 instanceof Within) {
                      return new Data_Tuple.Tuple(y, vy);
                  };
                  throw new Error("Failed pattern match at Data.Ball (line 199, column 7 - line 207, column 21): " + [ v3.constructor.name ]);
              })();
              return setR(Data_Vec["new"](v1.value0)(v2.value0))(setV(Data_Vec["new"](v1.value1)(v2.value1))(ball));
          };
      };
  };
  var applyForce = function (ball) {
      var a = Data_Vec.div(getForce(ball))(getMass(ball));
      var newV = Data_Vec.add(getV(ball))(a);
      return initForce(setV(newV)(ball));
  };
  var addForce = function (newForce) {
      return function (v) {
          return {
              r: v.r,
              v: v.v,
              radius: v.radius,
              force: Data_Vec.add(v.force)(newForce),
              mass: v.mass
          };
      };
  };
  var update = function (dimen) {
      return function (ball) {
          var state = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(addForce(gravity(getMass(ball)))))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(collide(0.9)(dimen)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(move))(function () {
                      return Control_Monad_State_Class.modify_(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(applyForce);
                  });
              });
          });
          return Control_Monad_State.execState(state)(ball);
      };
  };
  exports["new"] = $$new;
  exports["toCircle"] = toCircle;
  exports["update"] = update;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  /* no-redeclare global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  exports["setTimeout"] = $foreign.setTimeout;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var setCanvasDimensions = function (ce) {
      return function (d) {
          return Control_Apply.applySecond(Effect.applyEffect)($foreign.setCanvasHeight(ce)(d.height))($foreign.setCanvasWidth(ce)(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.fill(ctx)();
              return a;
          };
      };
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["fillPath"] = fillPath;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["arc"] = $foreign.arc;
  exports["clearRect"] = $foreign.clearRect;
})(PS);
(function(exports) {
  "use strict";              

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  }                    

  exports.tau = 2 * Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["tau"] = $foreign.tau;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Graphics.Canvas.Extra"] = $PS["Graphics.Canvas.Extra"] || {};
  var exports = $PS["Graphics.Canvas.Extra"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];                
  var clearCanvas = function (ctx) {
      return function (dimen) {
          return Graphics_Canvas.clearRect(ctx)({
              x: 0.0,
              y: 0.0,
              width: dimen.width,
              height: dimen.height
          });
      };
  };
  var circle = function (ctx) {
      return function (v) {
          return Graphics_Canvas.arc(ctx)({
              x: v.x,
              y: v.y,
              radius: v.radius,
              start: 0.0,
              end: $$Math.tau
          });
      };
  };
  exports["clearCanvas"] = clearCanvas;
  exports["circle"] = circle;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Ball = $PS["Data.Ball"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Vec = $PS["Data.Vec"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Timer = $PS["Effect.Timer"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Canvas_Extra = $PS["Graphics.Canvas.Extra"];                
  var view = function (ctx) {
      return function (ball) {
          return function __do() {
              Graphics_Canvas.setFillStyle(ctx)("salmon")();
              return Graphics_Canvas.fillPath(ctx)(Graphics_Canvas_Extra.circle(ctx)(Data_Ball.toCircle(ball)))();
          };
      };
  };
  var canvasDimen = {
      width: 600.0,
      height: 600.0
  };
  var init = Data_Ball["new"](Data_Vec["new"](canvasDimen.width / 2.0)(canvasDimen.height / 2.0))(Data_Vec["new"](10.0)(2.0))(10.0)(10.0);
  var initCanvas = function (canvas) {
      return Graphics_Canvas.setCanvasDimensions(canvas)(canvasDimen);
  };
  var update = function (ball) {
      return Data_Ball.update(canvasDimen)(ball);
  };
  var mainLoop = function (ctx) {
      return function (model) {
          return function __do() {
              Graphics_Canvas_Extra.clearCanvas(ctx)(canvasDimen)();
              view(ctx)(model)();
              return Data_Functor["void"](Effect.functorEffect)(Effect_Timer.setTimeout(10)(mainLoop(ctx)(update(model))))();
          };
      };
  };
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      if (v instanceof Data_Maybe.Just) {
          initCanvas(v.value0)();
          var ctx = Graphics_Canvas.getContext2D(v.value0)();
          return mainLoop(ctx)(init)();
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Effect_Console.log("Error on getCanvasElementById.")();
      };
      throw new Error("Failed pattern match at Main (line 64, column 5 - line 71, column 45): " + [ v.constructor.name ]);
  };
  exports["canvasDimen"] = canvasDimen;
  exports["initCanvas"] = initCanvas;
  exports["init"] = init;
  exports["update"] = update;
  exports["view"] = view;
  exports["mainLoop"] = mainLoop;
  exports["main"] = main;
})(PS);
PS["Main"].main();